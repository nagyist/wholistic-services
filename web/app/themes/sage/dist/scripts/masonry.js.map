{"version":3,"sources":["../bower_components/masonry/masonry.js"],"names":["window","factory","define","amd","exports","module","require","Masonry","Outlayer","getSize","fizzyUIUtils","utils","create","prototype","_resetLayout","this","_getMeasurement","measureColumns","i","cols","colYs","push","maxY","getContainerWidth","columnWidth","firstItem","items","firstItemElem","element","outerWidth","containerWidth","gutter","excess","mathMethod","Math","max","container","options","isFitWidth","parentNode","size","innerWidth","_getItemLayoutPosition","item","remainder","colSpan","min","colGroup","_getColGroup","minimumY","apply","shortColIndex","indexOf","position","x","y","setHeight","outerHeight","setSpan","length","groupCount","groupColYs","slice","_manageStamp","stamp","stampSize","offset","_getElementOffset","firstX","isOriginLeft","left","right","lastX","firstCol","floor","lastCol","stampMaxY","isOriginTop","top","bottom","_getContainerSize","height","width","_getContainerFitWidth","unusedCols","needsResizeLayout","previousWidth"],"mappings":"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","file":"masonry.js","sourcesContent":["/*!\n * Masonry v3.3.0\n * Cascading grid layout library\n * http://masonry.desandro.com\n * MIT License\n * by David DeSandro\n */\n\n( function( window, factory ) {\n  'use strict';\n  // universal module definition\n  if ( typeof define === 'function' && define.amd ) {\n    // AMD\n    define( [\n        'outlayer/outlayer',\n        'get-size/get-size',\n        'fizzy-ui-utils/utils'\n      ],\n      factory );\n  } else if ( typeof exports === 'object' ) {\n    // CommonJS\n    module.exports = factory(\n      require('outlayer'),\n      require('get-size'),\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    window.Masonry = factory(\n      window.Outlayer,\n      window.getSize,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( Outlayer, getSize, utils ) {\n\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry');\n\n  Masonry.prototype._resetLayout = function() {\n    this.getSize();\n    this._getMeasurement( 'columnWidth', 'outerWidth' );\n    this._getMeasurement( 'gutter', 'outerWidth' );\n    this.measureColumns();\n\n    // reset column Y\n    var i = this.cols;\n    this.colYs = [];\n    while (i--) {\n      this.colYs.push( 0 );\n    }\n\n    this.maxY = 0;\n  };\n\n  Masonry.prototype.measureColumns = function() {\n    this.getContainerWidth();\n    // if columnWidth is 0, default to outerWidth of first item\n    if ( !this.columnWidth ) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element;\n      // columnWidth fall back to item of first element\n      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||\n        // if first elem has no width, default to size of container\n        this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter;\n\n    // calculate columns\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth;\n    // fix rounding errors, typically with gutters\n    var excess = columnWidth - containerWidth % columnWidth;\n    // if overshoot is less than a pixel, round up, otherwise floor it\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[ mathMethod ]( cols );\n    this.cols = Math.max( cols, 1 );\n  };\n\n  Masonry.prototype.getContainerWidth = function() {\n    // container is parent if fit width\n    var container = this.options.isFitWidth ? this.element.parentNode : this.element;\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var size = getSize( container );\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  Masonry.prototype._getItemLayoutPosition = function( item ) {\n    item.getSize();\n    // how many columns does this brick span\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    // round if off by 1 pixel, otherwise use ceil\n    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );\n    colSpan = Math.min( colSpan, this.cols );\n\n    var colGroup = this._getColGroup( colSpan );\n    // get the minimum Y value from the columns\n    var minimumY = Math.min.apply( Math, colGroup );\n    var shortColIndex = utils.indexOf( colGroup, minimumY );\n\n    // position the brick\n    var position = {\n      x: this.columnWidth * shortColIndex,\n      y: minimumY\n    };\n\n    // apply setHeight to necessary columns\n    var setHeight = minimumY + item.size.outerHeight;\n    var setSpan = this.cols + 1 - colGroup.length;\n    for ( var i = 0; i < setSpan; i++ ) {\n      this.colYs[ shortColIndex + i ] = setHeight;\n    }\n\n    return position;\n  };\n\n  /**\n   * @param {Number} colSpan - number of columns the element spans\n   * @returns {Array} colGroup\n   */\n  Masonry.prototype._getColGroup = function( colSpan ) {\n    if ( colSpan < 2 ) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = [];\n    // how many different places could this brick fit horizontally\n    var groupCount = this.cols + 1 - colSpan;\n    // for each group potential horizontal position\n    for ( var i = 0; i < groupCount; i++ ) {\n      // make an array of colY values for that one group\n      var groupColYs = this.colYs.slice( i, i + colSpan );\n      // and get the max value of the array\n      colGroup[i] = Math.max.apply( Math, groupColYs );\n    }\n    return colGroup;\n  };\n\n  Masonry.prototype._manageStamp = function( stamp ) {\n    var stampSize = getSize( stamp );\n    var offset = this._getElementOffset( stamp );\n    // get the columns that this stamp affects\n    var firstX = this.options.isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor( firstX / this.columnWidth );\n    firstCol = Math.max( 0, firstCol );\n    var lastCol = Math.floor( lastX / this.columnWidth );\n    // lastCol should not go over if multiple of columnWidth #425\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min( this.cols - 1, lastCol );\n    // set colYs to bottom of the stamp\n    var stampMaxY = ( this.options.isOriginTop ? offset.top : offset.bottom ) +\n      stampSize.outerHeight;\n    for ( var i = firstCol; i <= lastCol; i++ ) {\n      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );\n    }\n  };\n\n  Masonry.prototype._getContainerSize = function() {\n    this.maxY = Math.max.apply( Math, this.colYs );\n    var size = {\n      height: this.maxY\n    };\n\n    if ( this.options.isFitWidth ) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  Masonry.prototype._getContainerFitWidth = function() {\n    var unusedCols = 0;\n    // count unused columns\n    var i = this.cols;\n    while ( --i ) {\n      if ( this.colYs[i] !== 0 ) {\n        break;\n      }\n      unusedCols++;\n    }\n    // fit container to columns that have been used\n    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;\n  };\n\n  Masonry.prototype.needsResizeLayout = function() {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth !== this.containerWidth;\n  };\n\n  return Masonry;\n\n}));\n"],"sourceRoot":"/source/"}